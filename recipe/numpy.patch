From 98ea4e8fdef8b979fcee02b4e04def3192c0048c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jan=20Jan=C3=9Fen?= <janssen@mpie.de>
Date: Wed, 29 Nov 2023 18:06:44 +0100
Subject: [PATCH] float fixes

---
 pwtools/crys.py                 | 10 +++++-----
 pwtools/dcd.py                  | 12 ++++++------
 pwtools/num.py                  |  2 +-
 pwtools/parse.py                |  8 ++++----
 pwtools/test/test_trajectory.py |  2 +-
 5 files changed, 17 insertions(+), 17 deletions(-)

diff --git a/pwtools/crys.py b/pwtools/crys.py
index d283e1e..d9b6566 100644
--- a/pwtools/crys.py
+++ b/pwtools/crys.py
@@ -464,8 +464,8 @@ def cc2celldm(cryst_const, fac=1.0):
     %(celldm)s
     """
     assert len(cryst_const) == 6, ("cryst_const has length != 6")
-    celldm = np.empty((6,), dtype=np.float)
-    a,b,c,alpha,beta,gamma = np.asarray(cryst_const, dtype=np.float)
+    celldm = np.empty((6,), dtype=float)
+    a,b,c,alpha,beta,gamma = np.asarray(cryst_const, dtype=float)
     celldm[0] = a*fac
     celldm[1] = b/a
     celldm[2] = c/a
@@ -486,8 +486,8 @@ def celldm2cc(celldm, fac=1.0):
         conversion a[Bohr] -> a[any unit]
     """
     assert len(celldm) == 6, ("celldm has length != 6")
-    cryst_const = np.empty((6,), dtype=np.float)
-    a,ba,ca,cos_alpha,cos_beta,cos_gamma = np.asarray(celldm, dtype=np.float)
+    cryst_const = np.empty((6,), dtype=float)
+    a,ba,ca,cos_alpha,cos_beta,cos_gamma = np.asarray(celldm, dtype=float)
     a = a*fac
     cryst_const[0] = a
     cryst_const[1] = ba * a
@@ -2483,7 +2483,7 @@ def _extend_cc(self, cc):
             return cc
 
     def compress(self, forget=['forces', 'stress',
-                               'coords','cryst_const'], dtype=np.float32):
+                               'coords','cryst_const'], dtype=float):
         """Compress Trajectory by deleting unused or redundant attrs (see
         `forget`). Cast float arrays to `dtype`. float32 is usually quite OK
         for MD data.
diff --git a/pwtools/dcd.py b/pwtools/dcd.py
index bbef799..6a1ef9e 100644
--- a/pwtools/dcd.py
+++ b/pwtools/dcd.py
@@ -123,8 +123,8 @@ def read_dcd_data_ref(fn, convang=False):
        ])
     cryst_const = []
     coords = []
-    tmp_coords = np.empty((natoms,3), dtype=np.float32)
-    tmp_cryst_const = np.empty((6,), dtype=np.float64)
+    tmp_coords = np.empty((natoms,3), dtype=float)
+    tmp_cryst_const = np.empty((6,), dtype=float)
     while True:
         _data = np.fromfile(fd, data_dtype, 1)
         if len(_data) == 0:
@@ -143,8 +143,8 @@ def read_dcd_data_ref(fn, convang=False):
             coords.append(tmp_coords.copy())
             cryst_const.append(tmp_cryst_const.copy())
     fd.close()
-    coords = np.array(coords, dtype=np.float32)
-    cryst_const = np.array(cryst_const, dtype=np.float64)
+    coords = np.array(coords, dtype=float)
+    cryst_const = np.array(cryst_const, dtype=float)
     if convang:
         cryst_const[:,3:] = np.arccos(cryst_const[:,3:])*180.0/np.pi
     return cryst_const, coords
@@ -208,14 +208,14 @@ def read_dcd_data(fn, convang=False):
                    (nstep,)))
     arr = np.fromfile(fd, dtype, 1)
     fd.close()
-    cryst_const = np.empty((nstep,6), dtype=np.float64)
+    cryst_const = np.empty((nstep,6), dtype=float)
     cryst_const[:,0] = arr['x1'][0,:,0]
     cryst_const[:,1] = arr['x1'][0,:,2]
     cryst_const[:,2] = arr['x1'][0,:,5]
     cryst_const[:,3] = arr['x1'][0,:,4]
     cryst_const[:,4] = arr['x1'][0,:,3]
     cryst_const[:,5] = arr['x1'][0,:,1]
-    coords = np.empty((nstep,natoms,3), dtype=np.float32)
+    coords = np.empty((nstep,natoms,3), dtype=float)
     coords[...,0] = arr['x3'][0,...]
     coords[...,1] = arr['x5'][0,...]
     coords[...,2] = arr['x7'][0,...]
diff --git a/pwtools/num.py b/pwtools/num.py
index cae6153..abae712 100644
--- a/pwtools/num.py
+++ b/pwtools/num.py
@@ -924,7 +924,7 @@ def get_min(self, x0=None, **kwds):
         xopt = optimize.fmin(self, x0, **_kwds)
         return xopt
 
-def fempty(shape, dtype=np.float):
+def fempty(shape, dtype=float):
     return np.empty(shape, dtype=dtype, order='F')
 
 
diff --git a/pwtools/parse.py b/pwtools/parse.py
index 3898100..3edfa29 100644
--- a/pwtools/parse.py
+++ b/pwtools/parse.py
@@ -170,7 +170,7 @@ def nstep_from_txt(txt):
     else:
         return int(txt)
 
-def traj_from_txt(txt, shape, axis=0, dtype=np.float, sep=' '):
+def traj_from_txt(txt, shape, axis=0, dtype=float, sep=' '):
     """Used for 3d trajectories where the exact shape of the array as written
     by the MD code must be known, e.g. (nstep,N,3) where N=3 (cell, stress) or
     N=natoms (coords, forces, ...).
@@ -206,14 +206,14 @@ def traj_from_txt(txt, shape, axis=0, dtype=np.float, sep=' '):
         # (nstep,natoms,3)
         return np.fromstring(txt, sep=sep, dtype=dtype).reshape(shape)
 
-def arr1d_from_txt(txt, dtype=np.float):
+def arr1d_from_txt(txt, dtype=float):
     if txt.strip() == '':
         return None
     else:
         ret = np.atleast_1d(np.loadtxt(StringIO(txt), dtype=dtype))
         return ret
 
-def arr2d_from_txt(txt, dtype=np.float):
+def arr2d_from_txt(txt, dtype=float):
     if txt.strip() == '':
         return None
     else:
@@ -1255,7 +1255,7 @@ def _get_scale_file(self):
             cmd = "grep -A%i 'SCALED ATOMIC COORDINATES' %s | tail -n%i" \
                   %(self.natoms, fn, self.natoms)
             arr = arr2d_from_txt(com.backtick(cmd), dtype=str)
-            coords_frac = arr[:,:3].astype(np.float)
+            coords_frac = arr[:,:3].astype(float)
             symbols = arr[:,3].tolist()
             return {'coords_frac': coords_frac,
                     'symbols': symbols,
diff --git a/pwtools/test/test_trajectory.py b/pwtools/test/test_trajectory.py
index 2f74992..af91998 100644
--- a/pwtools/test/test_trajectory.py
+++ b/pwtools/test/test_trajectory.py
@@ -365,7 +365,7 @@ def test_compress():
     assert old.forces is not None
     old.forces = np.ones_like(old.forces).astype(int)
     float_dtype_old = old.coords.dtype
-    float_dtype_new = np.float32
+    float_dtype_new = float
     assert float_dtype_new != float_dtype_old
     arr_t = type(np.array([1.0]))
     forget = ['stress', 'velocity']
